li t1, 0
		li t3, 0
		li t4,0
		li t5, 0
		li s1, 0
		li t2, 0
		li s11, 0
		li s7, 1
	intro:
		print_str(prompt)
		read_n(t0)
		blez t0, Error_Message
		addi t2, t0, -2
		addi s1, t2, 0
		addi s10, t2, 1
		
		beq t0, s7, is_one
		bne t0, s7, is_not_one
		
		is_one:
		print_str(star_dollar)
		write_to_buffer(0x24)
		print_str(newLine)
		write_to_buffer(0x0a)
		j Exit
		
		is_not_one:
		j first_row
		
		
		first_row:
		print_str(dollar)
		write_to_buffer(0x24)
		
		print_str(newLine)
		write_to_buffer(0x0a)
		j spacing
		
		
		#external spacing
		spacing:
			bne t3, s1, out_space_ne
			beq t3, s1 , out_space_e
			
	
		out_space_e:
			print_str(dollar)
			write_to_buffer(0x24)
			li t3 ,0
			addi s1, s1, -1
			j internal
	
		out_space_ne:
#fix the write to buffer here
			print_str(space)





			addi t3, t3, 1
			j spacing
	
	
		#internal spacing
		internal:
			beq t4 , t1, in_space_e
			bne t4, t1, in_space_ne
	
	
		in_space_e:
			li t1, 0
			print_str(dollar)
			write_to_buffer(0x24)
			j reassess
	
		in_space_ne:
			print_str(Zero)
			write_to_buffer(0x30)
			addi t1, t1, 1
			j internal
	
		#vertical control
		reassess:
			beq t4,t2, lost_braincells
			bne t4,t2,nadder
	
		nadder:
			print_str(newLine)
			write_to_buffer(0x0a)
			addi t4,t4,1
			j spacing
		
		lost_braincells:
			print_str(newLine)
			write_to_buffer(0x0a)
			j Exit
		
		Error_Message:
			print_str(invalidMsg)
			
			print_str(newLine)
			write_to_buffer(0x0a)
			li t0, 0
			li t2, 0
			j intro
